{"ast":null,"code":"var _jsxFileName = \"/home/samuel/Documents/Zuri project/zc_main/zc_frontend/src/contexts/Url.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const URLContext = /*#__PURE__*/createContext(null);\nexport const UrlProvider = ({\n  children\n}) => {\n  _s();\n\n  const [url, setUrl] = useState(null);\n  const modalRef = useRef(); // setting up my states for the profile topbar modal\n\n  const [showModal, setShowModal] = useState(false);\n  const [showStatus, setShowStatus] = useState(false);\n  const [chosenEmoji, setChosenEmoji] = useState(null); // The function that opens the topbar profile modal\n\n  const openModal = () => {\n    setShowModal(!showModal);\n  }; // The function that closes the topbar profile modal\n\n\n  const closeModal = e => {\n    if (modalRef.current === e.target) {\n      setShowModal(false);\n      console.log(\"close\");\n    }\n  }; // The function that opens the topbar profile status modal \n\n\n  const openStatus = () => {\n    setShowStatus(!showStatus);\n  }; // The function that closes the topbar profile status modal\n\n\n  const closeStatus = e => {\n    if (modalRef.current === e.target) {\n      setShowStatus(false);\n    }\n  }; // The function for the emoji onclick events\n\n\n  const onEmojiClick = (event, emojiObject) => {\n    setChosenEmoji(emojiObject);\n  }; // Passes all functions and states to the state object\n\n\n  const state = {\n    url: [url, setUrl],\n    openModal,\n    closeModal,\n    openStatus,\n    closeStatus,\n    modalRef,\n    show: [showModal, setShowModal],\n    status: [showStatus, setShowStatus],\n    emoji: [chosenEmoji, setChosenEmoji],\n    onEmojiClick\n  };\n  return /*#__PURE__*/_jsxDEV(URLContext.Provider, {\n    value: state,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UrlProvider, \"WNgKGkrUfdbhFOzWfTuzwFQmYkA=\");\n\n_c = UrlProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UrlProvider\");","map":{"version":3,"sources":["/home/samuel/Documents/Zuri project/zc_main/zc_frontend/src/contexts/Url.js"],"names":["createContext","useState","useRef","URLContext","UrlProvider","children","url","setUrl","modalRef","showModal","setShowModal","showStatus","setShowStatus","chosenEmoji","setChosenEmoji","openModal","closeModal","e","current","target","console","log","openStatus","closeStatus","onEmojiClick","event","emojiObject","state","show","status","emoji"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,MAAlC,QAAgD,OAAhD;;AAEA,OAAO,MAAMC,UAAU,gBAAGH,aAAa,CAAC,IAAD,CAAhC;AACP,OAAO,MAAMI,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC3C,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAMO,QAAQ,GAAGN,MAAM,EAAvB,CAF2C,CAI3C;;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,IAAD,CAA9C,CAP2C,CAW3C;;AACA,QAAMc,SAAS,GAAG,MAAM;AACtBL,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAFD,CAZ2C,CAgB3C;;;AACA,QAAMO,UAAU,GAAGC,CAAC,IAAI;AACtB,QAAIT,QAAQ,CAACU,OAAT,KAAqBD,CAAC,CAACE,MAA3B,EAAmC;AACjCT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,GALD,CAjB2C,CAyB3C;;;AACA,QAAMC,UAAU,GAAG,MAAM;AACvBV,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,GAFD,CA1B2C,CA8B3C;;;AACA,QAAMY,WAAW,GAAGN,CAAC,IAAI;AACvB,QAAIT,QAAQ,CAACU,OAAT,KAAqBD,CAAC,CAACE,MAA3B,EAAmC;AACjCP,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAJD,CA/B2C,CAsC3C;;;AACA,QAAMY,YAAY,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAC3CZ,IAAAA,cAAc,CAACY,WAAD,CAAd;AACH,GAFC,CAvC2C,CA6C7C;;;AACE,QAAMC,KAAK,GAAG;AACZrB,IAAAA,GAAG,EAAG,CAACA,GAAD,EAAMC,MAAN,CADM;AAEZQ,IAAAA,SAFY;AAGZC,IAAAA,UAHY;AAIZM,IAAAA,UAJY;AAKZC,IAAAA,WALY;AAMZf,IAAAA,QANY;AAOZoB,IAAAA,IAAI,EAAG,CAACnB,SAAD,EAAYC,YAAZ,CAPK;AAQZmB,IAAAA,MAAM,EAAG,CAAClB,UAAD,EAAaC,aAAb,CARG;AASZkB,IAAAA,KAAK,EAAE,CAACjB,WAAD,EAAcC,cAAd,CATK;AAUZU,IAAAA;AAVY,GAAd;AAcA,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEG,KAA5B;AAAA,cACGtB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjEM;;GAAMD,W;;KAAAA,W","sourcesContent":["import { createContext, useState, useRef } from 'react'\n\nexport const URLContext = createContext(null)\nexport const UrlProvider = ({ children }) => {\n  const [url, setUrl] = useState(null)\n  const modalRef = useRef();\n\n  // setting up my states for the profile topbar modal\n  const [showModal, setShowModal] = useState(false)\n  const [showStatus, setShowStatus] = useState(false)\n  const [chosenEmoji, setChosenEmoji] = useState(null);\n\n\n\n  // The function that opens the topbar profile modal\n  const openModal = () => {\n    setShowModal(!showModal)\n  }\n\n  // The function that closes the topbar profile modal\n  const closeModal = e => {\n    if (modalRef.current === e.target) {\n      setShowModal(false);\n      console.log(\"close\")\n    }\n  };\n\n\n  // The function that opens the topbar profile status modal \n  const openStatus = () => {\n    setShowStatus(!showStatus)\n  }\n\n  // The function that closes the topbar profile status modal\n  const closeStatus = e => {\n    if (modalRef.current === e.target) {\n      setShowStatus(false);\n    }\n  };\n\n\n  // The function for the emoji onclick events\n  const onEmojiClick = (event, emojiObject) => {\n    setChosenEmoji(emojiObject);\n}\n\n\n\n// Passes all functions and states to the state object\n  const state = {\n    url : [url, setUrl],\n    openModal,\n    closeModal,\n    openStatus,\n    closeStatus,\n    modalRef,\n    show : [showModal, setShowModal],\n    status : [showStatus, setShowStatus],\n    emoji: [chosenEmoji, setChosenEmoji],\n    onEmojiClick,\n  }\n\n\n  return (\n    <URLContext.Provider value={state}>\n      {children}\n    </URLContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}